type: edu
custom_name: stage3
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/life/State.java
  visible: true
  text: |
    package life;

    public enum State {
        ALIVE, DEAD
    }
  learner_created: true
- name: src/life/Cell.java
  visible: true
  text: |
    package life;

    public class Cell {
        public final int row;
        public final int col;
        public final State state;

        public Cell(int row, int col, State state) {
            this.row = row;
            this.col = col;
            this.state = state;
        }

        @Override
        public String toString() {
            return state == State.ALIVE ? "O" : " ";
        }
    }
  learner_created: true
- name: src/life/RandomCellsGenerator.java
  visible: true
  text: |
    package life;

    import java.util.Random;

    class RandomCellsGenerator implements CellsGenerator {
        private final Random random;

        public RandomCellsGenerator(int seed) {
            random = new Random(seed);
        }

        @Override
        public Cell[][] generate(int size) {
            Cell[][] cells = new Cell[size][size];
            for (int row = 0; row < cells.length; row++) {
                for (int col = 0; col < cells[row].length; col++) {
                    State state = random.nextBoolean() ? State.ALIVE : State.DEAD;
                    cells[row][col] = new Cell(row, col, state);
                }
            }
            return cells;
        }
    }
  learner_created: true
- name: src/life/CellsGenerator.java
  visible: true
  text: |
    package life;

    interface CellsGenerator {
        Cell[][] generate(int size);
    }
  learner_created: true
- name: src/life/Grid.java
  visible: true
  text: |
    package life;

    public class Grid {
        private final Cell[][] cells;

        public Grid(Cell[][] cells) {
            this.cells = cells;
        }

        public void print() {
            for (Cell[] row : cells) {
                for (Cell cell : row) {
                    System.out.print(cell);
                }
                System.out.println();
            }
        }

        public Grid next() {
            Cell[][] nextCells = new Cell[cells.length][];
            for (int row = 0; row < cells.length; row++) {
                nextCells[row] = new Cell[cells[row].length];
                for (int col = 0; col < cells[row].length; col++) {
                    Cell cell = cells[row][col];
                    State newState;
                    State state = cell.state;
                    if (state == State.ALIVE && isSurvivor(cell) || state == State.DEAD && isReborn(cell)) {
                        newState = State.ALIVE;
                    } else {
                        newState = State.DEAD;
                    }
                    Cell nextCell = new Cell(row, col, newState);
                    nextCells[row][col] = nextCell;
                }
            }
            return new Grid(nextCells);
        }

        private boolean isReborn(Cell cell) {
            int count = countAlive(cell);
            return count == 3;
        }

        private boolean isSurvivor(Cell cell) {
            int count = countAlive(cell);
            return count == 2 || count == 3;
        }

        private int countAlive(Cell cell) {
            int count = 0;
            int row = cell.row;
            int rowLength = cells.length;
            int upRow = back(row, rowLength);
            int downRow = forth(row, rowLength);
            int col = cell.col;
            int colLength = cells[row].length;
            int leftCol = back(col, colLength);
            int rightCol = forth(col, colLength);
            State state = State.ALIVE;
            Cell northwest = cells[upRow][leftCol];
            if (northwest.state == state) count++;
            Cell north = cells[upRow][col];
            if (north.state == state) count++;
            Cell northeast = cells[upRow][rightCol];
            if (northeast.state == state) count++;
            Cell west = cells[row][leftCol];
            if (west.state == state) count++;
            Cell east = cells[row][rightCol];
            if (east.state == state) count++;
            Cell southwest = cells[downRow][leftCol];
            if (southwest.state == state) count++;
            Cell south = cells[downRow][col];
            if (south.state == state) count++;
            Cell southeast = cells[downRow][rightCol];
            if (southeast.state == state) count++;
            return count;
        }

        private int back(int index, int length) {
            int back = index - 1;
            if (back >= 0) {
                return back;
            } else {
                return length - 1;
            }
        }

        private int forth(int index, int length) {
            int forth = index + 1;
            if (forth < length) {
                return forth;
            } else {
                return 0;
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/296/implement
status: Solved
record: 3
