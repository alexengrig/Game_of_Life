type: edu
custom_name: stage5
files:
- name: src/life/GameOfLife.java
  visible: true
  text: |
    package life;

    import javax.swing.*;

    public class GameOfLife extends JFrame {
        public GameOfLife() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |2-

    import common.GameOfLifeStage5Test;

    public class GameOfLifeTest extends GameOfLifeStage5Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun Boolean.toCheckResult() = CheckResult(this, null)

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/GameOfLifeStage5Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JButtonFixture
    import org.assertj.swing.fixture.JLabelFixture
    import org.assertj.swing.fixture.JToggleButtonFixture
    import org.hyperskill.hstest.v6.common.Utils
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage5Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            val playButton = ComponentRequirements("PlayToggleButton", isEnabled = true) { window.toggleButton(it) }
            val resetButton = ComponentRequirements("ResetButton", isEnabled = true) { window.button(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel, playButton, resetButton) +
                    componentsAreEnabledTests(generationLabel, aliveLabel, playButton, resetButton) +
                    stage5Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel,
                            playButtonRequirements = playButton,
                            resetButtonRequirements = resetButton
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage5Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>,
            playButtonRequirements: ComponentRequirements<JToggleButtonFixture>,
            resetButtonRequirements: ComponentRequirements<JButtonFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("App crashes when reset is clicked") {
                    val resetButton = resetButtonRequirements.requireExistingComponent()

                    resetButton.click()

                    return@createPredefinedFeedbackTest true
                },

                createDynamicFeedbackTest {
                    /*
                    Flip-flop play button, check labels, reset, flip-flop again, check again
                    */

                    val playButton = playButtonRequirements.requireExistingComponent()

                    playButton.check()
                    Utils.sleep(100)
                    playButton.uncheck()

                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    val resetButton = resetButtonRequirements.requireExistingComponent()
                    resetButton.click()

                    Utils.sleep(100)

                    playButton.check()
                    Utils.sleep(100)
                    playButton.uncheck()

                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/life/State.java
  visible: true
  text: |
    package life;

    public enum State {
        ALIVE, DEAD
    }
  learner_created: true
- name: src/life/Cell.java
  visible: true
  text: |
    package life;

    public class Cell {
        public final int row;
        public final int col;
        public final State state;

        public Cell(int row, int col, State state) {
            this.row = row;
            this.col = col;
            this.state = state;
        }

        @Override
        public String toString() {
            return "Cell{" +
                    "row=" + row +
                    ", col=" + col +
                    ", state=" + state +
                    '}';
        }
    }
  learner_created: true
- name: src/life/Field.java
  visible: true
  text: |
    package life;

    import javax.swing.*;
    import java.awt.*;
    import java.util.Iterator;

    public class Field extends JPanel {
        private Grid grid;

        public Field() {
        }

        public void setGrid(Grid grid) {
            this.grid = grid;
            repaint();
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (grid == null) {
                return;
            }
            int height = getHeight();
            int width = getWidth();
            int length = Math.min(height, width);
            int count = grid.size();
            int size = length / count;
            g.setColor(Color.BLACK);
            Iterator<Cell[]> iterator = grid.iterator();
            for (int i = 0, y = 0; i < count; i++, y += size) {
                Cell[] row = iterator.next();
                for (int j = 0, x = 0; j < row.length; j++, x += size) {
                    Cell cell = row[j];
                    if (State.DEAD == cell.state) {
                        g.drawRect(x, y, size, size);
                    } else {
                        g.fillRect(x, y, size, size);
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/life/RandomCellsGenerator.java
  visible: true
  text: |
    package life;

    import java.util.Random;

    class RandomCellsGenerator implements CellsGenerator {
        private final Random random;

        public RandomCellsGenerator(int seed) {
            random = new Random(seed);
        }

        @Override
        public Cells generate(int size) {
            Cell[][] cells = new Cell[size][size];
            for (int row = 0; row < cells.length; row++) {
                for (int col = 0; col < cells[row].length; col++) {
                    State state = random.nextBoolean() ? State.ALIVE : State.DEAD;
                    cells[row][col] = new Cell(row, col, state);
                }
            }
            return new Cells(cells);
        }
    }
  learner_created: true
- name: src/life/CellsGenerator.java
  visible: true
  text: |
    package life;

    interface CellsGenerator {
        Cells generate(int size);
    }
  learner_created: true
- name: src/life/Grid.java
  visible: true
  text: |
    package life;

    import org.jetbrains.annotations.NotNull;

    import java.util.Iterator;

    public class Grid implements Iterable<Cell[]> {
        private final Cells cells;
        private final int aliveCount;

        public Grid(Cells cells) {
            this.cells = cells;
            this.aliveCount = countAlive(cells);
        }

        public int size() {
            return cells.length();
        }

        public int getAliveCount() {
            return aliveCount;
        }

        private int countAlive(Cells cells) {
            int count = 0;
            for (Cell[] row : cells) {
                for (Cell cell : row) {
                    count += countAlive(cell);
                }
            }
            return count;
        }

        private int countAlive(Cell cell) {
            int count = 0;
            int row = cell.row;
            int rowLength = cells.length();
            int upRow = back(row, rowLength);
            int downRow = forth(row, rowLength);
            int col = cell.col;
            int colLength = cells.length(row);
            int leftCol = back(col, colLength);
            int rightCol = forth(col, colLength);
            State state = State.ALIVE;
            Cell northwest = cells.get(upRow, leftCol);
            if (northwest.state == state) count++;
            Cell north = cells.get(upRow, col);
            if (north.state == state) count++;
            Cell northeast = cells.get(upRow, rightCol);
            if (northeast.state == state) count++;
            Cell west = cells.get(row, leftCol);
            if (west.state == state) count++;
            Cell east = cells.get(row, rightCol);
            if (east.state == state) count++;
            Cell southwest = cells.get(downRow, leftCol);
            if (southwest.state == state) count++;
            Cell south = cells.get(downRow, col);
            if (south.state == state) count++;
            Cell southeast = cells.get(downRow, rightCol);
            if (southeast.state == state) count++;
            return count;
        }

        private int back(int index, int length) {
            int back = index - 1;
            if (back >= 0) {
                return back;
            } else {
                return length - 1;
            }
        }

        private int forth(int index, int length) {
            int forth = index + 1;
            if (forth < length) {
                return forth;
            } else {
                return 0;
            }
        }

        public Grid next() {
            Cell[][] nextCells = new Cell[cells.length()][];
            for (int row = 0; row < cells.length(); row++) {
                nextCells[row] = new Cell[cells.length(row)];
                for (int col = 0; col < cells.length(row); col++) {
                    Cell cell = cells.get(row, col);
                    State newState;
                    State state = cell.state;
                    if (state == State.ALIVE && isSurvivor(cell) || state == State.DEAD && isReborn(cell)) {
                        newState = State.ALIVE;
                    } else {
                        newState = State.DEAD;
                    }
                    Cell nextCell = new Cell(row, col, newState);
                    nextCells[row][col] = nextCell;
                }
            }
            return new Grid(new Cells(nextCells));
        }

        private boolean isReborn(Cell cell) {
            int count = countAlive(cell);
            return count == 3;
        }

        private boolean isSurvivor(Cell cell) {
            int count = countAlive(cell);
            return count == 2 || count == 3;
        }

        @NotNull
        @Override
        public Iterator<Cell[]> iterator() {
            return cells.iterator();
        }
    }
  learner_created: true
- name: src/life/Cells.java
  visible: true
  text: |
    package life;

    import org.jetbrains.annotations.NotNull;

    import java.util.Arrays;
    import java.util.Iterator;

    public class Cells implements Iterable<Cell[]> {
        private final Cell[][] cells;

        public Cells(Cell[][] cells) {
            this.cells = cells;
        }

        public int length() {
            return cells.length;
        }

        public int length(int rowIndex) {
            return cells[rowIndex].length;
        }

        public Cell get(int rowIndex, int colIndex) {
            return cells[rowIndex][colIndex];
        }

        @NotNull
        @Override
        public Iterator<Cell[]> iterator() {
            return new Iterator<>() {
                private Cell[][] target = Arrays.copyOf(cells, cells.length);
                private int index = 0;

                @Override
                public boolean hasNext() {
                    return index < target.length;
                }

                @Override
                public Cell[] next() {
                    return target[index++];
                }
            };
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/299/implement
status: Solved
record: -1
